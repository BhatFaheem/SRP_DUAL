//
// Generated file, do not edit! Created by opp_msgtool 6.1 from SecRoutingUpdate.msg.
//

#ifndef __SECROUTINGUPDATE_M_H
#define __SECROUTINGUPDATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class SecRoutingUpdate;
/**
 * Class generated from <tt>SecRoutingUpdate.msg:2</tt> by opp_msgtool.
 * <pre>
 * message SecRoutingUpdate
 * {
 *     int origin;     // ID of sender router
 *     int dest;       // Destination router ID being advertised
 *     double metric;  // Distance (cost) to dest from origin
 *     string hash;    // HMAC hash string for authentication
 * }
 * </pre>
 */
class SecRoutingUpdate : public ::omnetpp::cMessage
{
  protected:
    int origin = 0;
    int dest = 0;
    double metric = 0;
    omnetpp::opp_string hash;

  private:
    void copy(const SecRoutingUpdate& other);

  protected:
    bool operator==(const SecRoutingUpdate&) = delete;

  public:
    SecRoutingUpdate(const char *name=nullptr, short kind=0);
    SecRoutingUpdate(const SecRoutingUpdate& other);
    virtual ~SecRoutingUpdate();
    SecRoutingUpdate& operator=(const SecRoutingUpdate& other);
    virtual SecRoutingUpdate *dup() const override {return new SecRoutingUpdate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOrigin() const;
    virtual void setOrigin(int origin);

    virtual int getDest() const;
    virtual void setDest(int dest);

    virtual double getMetric() const;
    virtual void setMetric(double metric);

    virtual const char * getHash() const;
    virtual void setHash(const char * hash);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SecRoutingUpdate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SecRoutingUpdate& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline SecRoutingUpdate *fromAnyPtr(any_ptr ptr) { return check_and_cast<SecRoutingUpdate*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SECROUTINGUPDATE_M_H

